Program
    : StatementList
    ;

StatementList
    : Statement
    : StatementList Statement
    ;

Statement
    : ExpressionStatement
    | BlockStatement
    | EmptyStatement
    | WhileStatement
    | DoWhileStatement
    | ForStatement
    | IfStatement
    | TryStatement
    | ReturnStatement
    | SwitchStatement
    | LabeledStatement
    | ThrowStatement
    | BreakStatement
    | ContinueStatement
    | VariableDeclaration
    | FunctionDeclaration
    ;

EmptyStatement
    | ;
    ;

BlockStatement
    : { }
    | { StatementList }
    ;

WhileStatement
    : while (Expression) Statement
    ;

DoWhileStatement
    : do Statement while (Expression)
    | do Statement while (Expression);
    ;

ForStatement
    : for (Expression; Expression; Expression) Statement

IfStatement
    : if ( Expression ) Statement
    | if ( Expression ) Statement else Statement
    ;

SwitchStatement
    : switch ( Expression ) { SwitchCaseList }
    ;

SwitchCaseList
    : SwitchCase
    | SwitchCaseList SwitchCase
    ;

SwitchCase
    : case Expression : StatementList
    | default : StatementList
    ;

TryStatement
    : try BlockStatement catch ( Identifier ) BlockStatement
    | try BlockStatement catch ( Identifier ) BlockStatement finally BlockStatement
    ;

ReturnStatement
    : return Expression
    | return Expression ;
    ;

ThrowStatement
    : throw Expression
    | throw Expression ;
    ;

BreakStatement
    : break
    | break ;
    | break Identifier
    | break Identifier ;
    ;

ContinueStatement
    : continue
    | continue ;
    | continue Identifier
    | continue Identifier ;
    ;

ExpressionStatement
    : LabeledStatement
    | Expression
    | Expression ;
    ;

LabeledStatement
    | Identifier : Statement
    ;

VariableDeclaration
    : var VariableDeclaratorList
    | var VariableDeclaratorList ;
    | let VariableDeclaratorList
    | let VariableDeclaratorList ;
    | const VariableDeclaratorList
    | const VariableDeclaratorList ;
    ;

VariableDeclaratorList
    | VariableDeclarator
    | VariableDeclaratorList , VariableDeclarator
    ;

VariableDeclarator
    : Identifier
    | Identifier = Expression
    ;

FunctionDeclaration
    : function Identifier () BlockStatement
    | function Identifier ( ParameterList ) BlockStatement
    ;

ParameterList
    : Parameter
    | ParameterList , Parameter
    ;

Parameter
    : Identifier
    | AssignmentExpression
    ;

Expression
    : ConditionalExpression
    ;

ConditionalExpression
    : AssignmentExpression
    | Expression ? Expression : Expression
    ;

AssignmentExpression
    : LogicalExpression
    | Identifier = Expression
    | Identifier <operator> = Expression
    ;

LogicalExpression
    : OrExpression
    ;

OrExpression
    : AndExpression
    | OrExpression || AndExpression
    ;

AndExpression
    : BinaryExpression
    | AndExpression && BinaryExpression
    ;

BinaryExpression
    : ComparativeExpression
    ;

ComparativeExpression
    : BitwiseExpression
    | ComparativeExpression > BitwiseExpression
    | ComprrativeExpression >= BitwiseExpression
    | ComparativeExpression < BitwiseExpression
    | ComparativeExpression <= BitwiseExpression
    | ComparativeExpression == BitwiseExpression
    | ComparativeExpression != BitwiseExpression
    | ComparativeExpression === BitwiseExpression
    | ComparativeExpression !== BitwiseExpression
    ;

BitwiseExpression
    : AdditiveExpression
    | BitwiseExpression <BIT_OPERATOR> AdditiveExpression
    ;

AdditiveExpression
    : MultiplicativeExpression
    | AdditiveExpression + MultiplicativeExpression
    | AdditiveExpression - MultiplicativeExpression
    ;

MultiplicativeExpression
    : PowerExpression
    | MultiplicativeExpression * PowerExpression
    | MultiplicativeExpression / PowerExpression
    | MultiplicativeExpression % PowerExpression
    ;

PowerExpression
    : UnaryExpression
    | PowerExpression ** UnaryExpression
    ;

UnaryExpression
    : UpdateExpression
    | + UpdateExpression
    | - UpdateExpression
    ;

UpdateExpression
    : MemberExpression
    | ++ MemberExpression
    | MemberExpression ++
    | -- MemberExpression
    | MemberExpression --
    ;

MemberExpression
    : PrimaryExpression
    | PrimaryExpression [ Expression ]
    | PrimaryExpression . Expression
    ;

PrimaryExpression
    : Literal
    | Identifier
    | ParenthesizedExpression
    | ArrayExpression
    | ObjectExpression
    ;

ParenthesizedExpression
    : ( Expression )
    ;

ArrayExpression
    : [ ArrayElements ]
    ;

ArrayElements
    : ,
    | Expression
    | ArrayElements ,
    | ArrayElements , Expression
    ;

ObjectExpression
    : { Properties }
    ;

Properties
    : Property
    | Properties , Property
    ;

Property
    : Identifier : Expression
    ;
