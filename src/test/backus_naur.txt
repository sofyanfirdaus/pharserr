Program
    : StatementList
    ;

StatementList
    : Statement
    : StatementList Statement
    ;

Statement
    : ExpressionStatement
    | BlockStatement
    | EmptyStatement
    | WhileStatement
    | DoWhileStatement
    | ForStatement
    | IfStatement
    | TryStatement
    | ReturnStatement
    | VariableDeclaration
    ;

EmptyStatement
    | ;
    ;

BlockStatement
    : { }
    | { StatementList }
    ;

WhileStatement
    : while (Expression) Statement
    ;

DoWhileStatement
    : do Statement while (Expression)
    | do Statement while (Expression);
    ;

ForStatement
    : for (Expression; Expression; Expression) Statement

IfStatement
    : if ( Expression ) Statement
    | if ( Expression ) Statement else Statement
    ;

TryStatement
    : try BlockStatement catch ( Identifier ) BlockStatement
    | try BlockStatement catch ( Identifier ) BlockStatement finally BlockStatement
    ;

ReturnStatement
    : return Expression
    | return Expression ;
    ;

ExpressionStatement
    : Expression
    | Expression ;
    ;

VariableDeclaration
    : var VariableDeclaratorList
    | var VariableDeclaratorList ;
    | let VariableDeclaratorList
    | let VariableDeclaratorList ;
    | const VariableDeclaratorList
    | const VariableDeclaratorList ;
    ;

VariableDeclaratorList
    | VariableDeclarator
    | VariableDeclaratorList , VariableDeclarator
    ;

VariableDeclarator
    | Identifier
    | Identifier = Expression
    ;

Expression
    : AssignmentExpression
    ;

AssignmentExpression
    : LogicalExpression
    | Identifier = Expression
    | Identifier <operator> = Expression
    ;

LogicalExpression
    : OrExpression
    ;

OrExpression
    : AndExpression
    | OrExpression || AndExpression
    ;

AndExpression
    : BinaryExpression
    | AndExpression && BinaryExpression
    ;

BinaryExpression
    : ComparativeExpression
    ;

ComparativeExpression
    : AdditiveExpression
    | ComparativeExpression > AdditiveExpression
    | ComprrativeExpression >= AdditiveExpression
    | ComparativeExpression < AdditiveExpression
    | ComparativeExpression <= AdditiveExpression
    | ComparativeExpression == AdditiveExpression
    | ComparativeExpression != AdditiveExpression
    | ComparativeExpression === AdditiveExpression
    | ComparativeExpression !== AdditiveExpression
    ;

AdditiveExpression
    : MultiplicativeExpression
    | AdditiveExpression + MultiplicativeExpression
    | AdditiveExpression - MultiplicativeExpression
    ;

MultiplicativeExpression
    : PowerExpression
    | MultiplicativeExpression * PowerExpression
    | MultiplicativeExpression / PowerExpression
    | MultiplicativeExpression % PowerExpression
    ;

PowerExpression
    : UnaryExpression
    | PowerExpression ** UnaryExpression
    ;

UnaryExpression
    : PrimaryExpression
    | + PrimaryExpression
    | - PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | Identifier
    | ParenthesizedExpression
    | CallExpression
    ;

ParenthesizedExpression
    : ( Expression )
    ;
